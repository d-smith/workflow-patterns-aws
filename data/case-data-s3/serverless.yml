service: s3casedata

provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: nodejs8.10
  apiKeys:
    - s3casedata-${opt:stage, self:provider.stage}
  usagePlan:
    throttle:
      burstLimit: 10
      rateLimit: 5
  environment:
    BUCKET_NAME: 'pdata97068-${self:provider.stage}'
    STEP_FN_ARN: 'arn:aws:states:#{AWS::Region}:#{AWS::AccountId}:stateMachine:${self:service}-${self:provider.stage}'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - states:StartExecution
      Resource: '*'
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
      Resource: '*'


functions:
  create:
    handler: create.create
    events:
    - http:
        path: create
        method: POST
        private: true
    
  procdata:
    handler: pdata.retrieve
    events:
    - http:
        method: Get
        private: true
        path: casedata/{txnid}
        request:
          parameters:
            paths:
              txnid: true
   
  step1:
    handler: casedata.step1
  fooStep:
    handler: casedata.fooStep
  barStep:
    handler: casedata.barStep
  bazStep:
    handler: casedata.bazStep
  quuxStep:
    handler: casedata.quuxStep



stepFunctions:
  stateMachines:
    Process1:
      name: s3casedata-${opt:stage}
      definition:
        StartAt: step-1
        States:
          step-1:
            Type: Task
            TimeoutSeconds: 30
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-step1"
            ResultPath: '$'
            Next: choiceStep
            Retry:
              - ErrorEquals:
                  - S3DataPreconditionError
                IntervalSeconds: 1
                MaxAttempts: 5
                BackoffRate: 1.25

          choiceStep:
            Type: Choice
            Choices:
              - Variable: '$.metavar'
                StringEquals: 'foo'
                Next: fooStep
              - Variable: '$.metavar'
                StringEquals: 'bar'
                Next: barStep
            Default: bazStep 
          fooStep:
            Type: Task
            TimeoutSeconds: 30
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-fooStep"
            ResultPath: '$'
            Next: quuxStep
            Retry:
              - ErrorEquals:
                  - S3DataPreconditionError
                IntervalSeconds: 1
                MaxAttempts: 5
                BackoffRate: 1.25

          barStep:
            Type: Task
            TimeoutSeconds: 30
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-barStep"
            ResultPath: '$'
            Next: quuxStep
            Retry:
              - ErrorEquals:
                  - S3DataPreconditionError
                IntervalSeconds: 1
                MaxAttempts: 5
                BackoffRate: 1.25

          bazStep:
            Type: Task
            TimeoutSeconds: 30
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-bazStep"
            ResultPath: '$'
            Next: quuxStep
            Retry:
              - ErrorEquals:
                  - S3DataPreconditionError
                IntervalSeconds: 1
                MaxAttempts: 5
                BackoffRate: 1.25

          quuxStep:
            Type: Task
            TimeoutSeconds: 30
            Resource: "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:${self:service}-${opt:stage}-quuxStep"
            ResultPath: '$'
            End: true
            Retry:
              - ErrorEquals:
                  - S3DataPreconditionError
                IntervalSeconds: 1
                MaxAttempts: 5
                BackoffRate: 1.25



plugins:
  - serverless-step-functions
  - serverless-pseudo-parameters